#pragma once
#include<iostream>
#include <vector>
#include <math.h>
#include <ctime>

typedef std::vector<std::vector<double>> matrix;

class Matrix
{
private:
	matrix Matr;
public:
	//Конструкторы класса
	Matrix();
	~Matrix();
	Matrix(unsigned Row, unsigned Col);

	//Получить или установить эл. матрицы
	double GetIndex(unsigned n, unsigned m);
	void SetIndex(unsigned n, unsigned m, double Value);

	//Задание значений эл. матрицы
	//Все эл. одним значением
	void FixValue(double Value);
	//Верхняя и нижняя грань рандомных значений для эл. матрицы
	//Все эл. разные
	void RandValue(int FirstLim, int LastLim);

	//Присвоит полученое значение новой матрице
	Matrix operator + (const Matrix& Matr2) const;
	Matrix operator - (const Matrix& Matr2) const;
	Matrix operator * (const Matrix& Matr2) const;

	//Присвоит полученое значение новой матрице
	Matrix Add(double Value) const;
	Matrix Sub(double Value) const;
	Matrix Mul(double Value) const;
	Matrix Div(double Value) const;

	//Текущая матрица преобразуется в транспонированную, или диагональную, или обратную
	void Transpose();
	void Diagonal();
	void Inverse();
	//Вернет определитель матрицы, если та - квадратная
	double Detr() const;

	//Получить или установить строку матрицы
	std::vector<double> GetString(unsigned Row);
	void SetString(unsigned Row, std::vector<double> Str);

	//Полученное значение запишет в текущую матрицу
	void operator += (const Matrix& Matr2);
	void operator -= (const Matrix& Matr2);
	void operator *= (const Matrix& Matr2);

	//Полученное значение запишет в текущую матрицу
	void operator += (double Value);
	void operator -= (double Value);
	void operator *= (double Value);
	void operator /= (double Value);

	void Display();

private:
	//Проверка на не выход индекса за границы матрицы
	bool WithinBorders(unsigned IndexRow, unsigned IndexCol);
	//Проверка на равенстнво матриц
	bool EqualMatrix(const matrix& Matr1, const matrix& Matr2) const;
	//Проверка на равенство строки столбцу
	bool EqualRowCol(const matrix& Matr1, const matrix& Matr2) const;
	//Проверка на не ступенчатость матрицы
	bool RectMatrix(const matrix& Matr1) const;
	//Проверка матрицы на квадратность
	bool SquareMatrix(const matrix& Matr1) const;

	//Определитель матрицы 2 на 2
	double Detr(const matrix& M) const;
	//Нахождение определителей миноров матрицы
	double Detr(const matrix& M, unsigned Row, unsigned Col) const;

	//Проверка на повторное использование строки, для нахождения обратной матрицы
	bool RepeatUsedLine(const std::vector<double>& ArrayIndexLine, unsigned IndexLine);
	//Деление строки матрицы на число
	std::vector<double> LineDivNumber(const std::vector<double>& Line, double Number);
	//Вычитание строк, одна из которых домножена на Index эл. первой
	std::vector<double> SubLine(const std::vector<double>& Line1, const std::vector<double>& Line2, unsigned Index);
	//Выравнивание еденичной матрицы
	void Unit(matrix& Matr1);
};
